import os

env_options = {
        "CC"    : "arm-linux-gnueabihf-gcc",
        "CXX"   : "arm-linux-gnueabihf-g++",
        "LD"    : "arm-linux-gnueabihf-g++",
        "AR"    : "arm-linux-gnueabihf-ar",
        "STRIP" : "arm-linux-gnueabihf-strip",

}

# Let's define a common build environment first...
common_env = Environment(**env_options)
common_env.Append(CPPDEFINES={'VERSION': 1})
common_env.Append(ENV = {'PATH' : os.environ['PATH']})
Export('common_env')

# Our release build is derived from the common build environment...
release_env = common_env.Clone()
# ... and adds a RELEASE preprocessor symbol ...
release_env.Append(CPPDEFINES=['RELEASE'])
# ... and release builds end up in the "build/release" dir
release_env.VariantDir('build/release', 'core')

# We define our debug build environment in a similar fashion...
debug_env = common_env.Clone()
debug_env.Append(CPPDEFINES=['DEBUG'])
debug_env.VariantDir('build/debug', 'core')

# Now that all build environment have been defined, let's iterate over
# them and invoke the lower level SConscript files.
for mode, env in dict(release=release_env, 
    	       	      debug=debug_env).iteritems():
    env.SConscript('build/%s/SConscript' % mode, {'env': env})


